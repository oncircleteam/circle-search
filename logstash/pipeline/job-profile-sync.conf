input{
    jdbc{
        jdbc_connection_string => "jdbc:postgresql://${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_DATABASE}"
        jdbc_user => "${DATABASE_USER}"
        jdbc_password => "${DATABASE_PASSWORD}"
        jdbc_driver_class => "org.postgresql.Driver"
        jdbc_driver_library => "/usr/share/logstash/logstash-core/lib/jars/postgresql-42.7.3.jar"
        jdbc_paging_enabled => true
        jdbc_page_size => 500
        use_column_value => true
        tracking_column => "updated_at"
        tracking_column_type => "timestamp"
        clean_run => true
        schedule => "*/10 * * * * *"
        statement => "
        SELECT job_profiles.*,
        (
        to_jsonb(users)
        )::text as user,
        jsonb_build_object(
        'preferred_positions',
        (
            SELECT jsonb_agg(
            to_jsonb(job_positions) ||
            jsonb_build_object(
                'translations',
                (
                SELECT jsonb_agg(to_jsonb(job_position_translations))
                FROM job_position_translations
                WHERE job_position_translations.job_position_id = job_positions.id
                )
            )
            )
            FROM job_positions
        )
        )::text as preferred_positions,
            jsonb_build_object('referrals', (SELECT jsonb_agg(to_jsonb(job_referral_requests) )
                FROM job_referral_requests
                WHERE status = 'APPROVED'
                ))
                ::text as referrals,

        jsonb_build_object(
        'experiences',
        (
            SELECT jsonb_agg(
            to_jsonb(job_experiences) ||
            jsonb_build_object(
                'company',
                (
                SELECT (to_jsonb(job_experience_companies))
                FROM job_experience_companies
                WHERE job_experience_companies.id = job_experiences.job_experience_company_id
                )
            )
            )
            FROM job_experiences
        )
        )::text as experiences


        FROM job_profiles
        JOIN users ON job_profiles.user_id = users.id
        WHERE job_profiles.updated_at > :sql_last_value AND job_profiles.updated_at < CURRENT_TIMESTAMP
        ORDER BY job_profiles.updated_at ASC
        "
    }
}
filter{
    mutate{
        copy => {"id" => "[@metadata][_id]"}
        remove_field => ["@version"]
    }
}
output{

    elasticsearch{
        hosts => "elasticsearch:9200"
        user => "logstash_internal"
        password => "${LOGSTASH_INTERNAL_PASSWORD}"
        index => "circle-job-profiles"
        document_id => "%{[@metadata][_id]}"
        pipeline => "circle-job-profiles"
    }
}