input{
    jdbc{
        jdbc_connection_string => "jdbc:postgresql://${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_DATABASE}"
        jdbc_user => "${DATABASE_USER}"
        jdbc_password => "${DATABASE_PASSWORD}"
        jdbc_driver_class => "org.postgresql.Driver"
        jdbc_driver_library => "/usr/share/logstash/logstash-core/lib/jars/postgresql-42.7.3.jar"
        jdbc_paging_enabled => true
        jdbc_page_size => 500
        use_column_value => true
        tracking_column => "updated_at"
        tracking_column_type => "timestamp"
        clean_run => true
        schedule => "*/10 * * * * *"
        statement => "      
        SELECT
    job_profiles.*,
    (to_jsonb(users))::text AS user,
    COALESCE(
        (
            SELECT jsonb_agg(
                to_jsonb(job_preferred_positions) ||
                jsonb_build_object(
                    'translations',
                    (
                        SELECT jsonb_agg(to_jsonb(job_position_translations))
                        FROM job_position_translations
                        WHERE job_position_translations.job_position_id = job_preferred_positions.job_position_id
                    )
                ) ||
                jsonb_build_object(
                    'job_position',
                    (
                        SELECT to_jsonb(job_positions)
                        FROM job_positions
                        WHERE job_positions.id = job_preferred_positions.job_position_id
                    )
                )
            )
            FROM job_preferred_positions
            WHERE job_preferred_positions.job_profile_id = job_profiles.id
        ),
        '[]'::jsonb
    )::text AS preferred_positions,
    COALESCE(
        (
            SELECT jsonb_agg(to_jsonb(job_referral_requests))
            FROM job_referral_requests
            WHERE status = 'APPROVED' AND job_referral_requests.job_profile_id = job_profiles.id
        ),
        '[]'::jsonb
    )::text AS referrals,
    COALESCE(
        (
            SELECT jsonb_agg(
                to_jsonb(job_experiences) ||
                jsonb_build_object(
                    'company',
                    (
                        SELECT to_jsonb(job_experience_companies)
                        FROM job_experience_companies
                        WHERE job_experience_companies.id = job_experiences.job_experience_company_id
                    )
                ) ||
                jsonb_build_object(
                    'position',
                    (
                        SELECT to_jsonb(job_positions)
                        FROM job_positions
                        WHERE job_positions.id = job_experiences.job_position_id
                    )
                )
            )
            FROM job_experiences
            WHERE job_experiences.job_profile_id = job_profiles.id
        ),
        '[]'::jsonb
    )::text AS experiences
FROM job_profiles
JOIN users ON job_profiles.user_id = users.id
 WHERE job_profiles.updated_at > :sql_last_value AND job_profiles.updated_at < CURRENT_TIMESTAMP
ORDER BY job_profiles.updated_at ASC
        "
    }
}
filter{
    mutate{
        copy => {"id" => "[@metadata][_id]"}
        remove_field => ["@version"]
    }
}
output{

    elasticsearch{
        hosts => "elasticsearch:9200"
        user => "logstash_internal"
        password => "${LOGSTASH_INTERNAL_PASSWORD}"
        index => "circle-job-profiles"
        document_id => "%{[@metadata][_id]}"
        pipeline => "circle-job-profiles"
    }
}