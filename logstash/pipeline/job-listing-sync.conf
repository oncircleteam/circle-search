input{
    jdbc{
        jdbc_connection_string => "jdbc:postgresql://${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_DATABASE}"
        jdbc_user => "${DATABASE_USER}"
        jdbc_password => "${DATABASE_PASSWORD}"
        jdbc_driver_class => "org.postgresql.Driver"
        jdbc_driver_library => "/usr/share/logstash/logstash-core/lib/jars/postgresql-42.7.3.jar"
        jdbc_paging_enabled => true
        jdbc_page_size => 500
        use_column_value => true
        tracking_column => "updated_at"
        tracking_column_type => "timestamp"
        clean_run => true
        schedule => "*/10 * * * * *"
        statement => "
        SELECT 
        job_listings.*,
        (
          to_jsonb(users) ||
          jsonb_build_object('business_place', to_jsonb(user_business_places))
        )::text as user,
        to_jsonb(user_business_places)::text as business_place,
        (to_jsonb(job_positions) || 
          jsonb_build_object('translations', (SELECT jsonb_agg(jsonb_build_object('name', job_position_translations.name,'include_position_names', job_position_translations.include_position_names))
          FROM job_position_translations
          WHERE job_position_translations.job_position_id = job_positions.id))
        )::text as position,
        COALESCE(job_listing_skills.job_skills, '[]'::jsonb)::text AS job_skills,
	   (
            SELECT jsonb_agg(jsonb_build_object(
                'id', job_listing_languages.language_id,
                'name', languages.name
            ))
            FROM job_listing_languages
            JOIN languages ON job_listing_languages.language_id = languages.id
            WHERE job_listing_languages.job_listing_id = job_listings.id
        )::text AS required_languages,
	
        (select REPLACE(CONCAT(	
        	'Position: ' || job_positions.name,
        	' | Type: ' || REGEXP_REPLACE(LOWER((job_listings.type)::text ), '_', ' ', 'g'),
        	' | Salary: ' || format_salary(job_listings.minimum_pay, job_listings.maximum_pay, job_listings.salary_type::TEXT),
        	CASE WHEN job_listings.is_tips = true THEN ' | Have tips' ELSE ''END,
            case when job_listings.is_night_shift = true then ' | Night shift' else '' end,
            ' | Experience required: ' || job_listings.experience_years_required || ' year(s)',
            COALESCE(' | Work Schedules: ' || (
                    SELECT format_work_schedule(
                        jsonb_agg(jsonb_build_object(
                            'startTime', ws.start_time,
                            'endTime', ws.end_time,
                            'dayOfWeek', ws.day_of_week,
                            'startDate', ws.start_date
                        ))
                    )
                    FROM work_schedules ws
                    WHERE ws.job_listing_id = job_listings.id
                ), ''),
            ' | Skill: ' || 
			    (SELECT STRING_AGG(job_skills.name, ', ')
			     FROM job_listing_skills
			     JOIN job_skills ON job_listing_skills.job_skill_id = job_skills.id
			     WHERE job_listing_skills.job_listing_id = job_listings.id)
			,
            case when user_business_places.id = null then '' else ' | Business place: ' || user_business_places.name || ', ' || user_business_places.address || strip_html_tags(user_business_places.description) end,
            case when job_listings.job_description = null or job_listings.job_description = '' then '' else ' | Job description: ' || strip_html_tags(job_listings.job_description) end,
            case when job_listings.business_description = null or job_listings.business_description = '' then '' else ' | Business description: ' || strip_html_tags(user_business_places.description) end,
	
			case when job_listings.benefits = null then '' else ' | Benefits: ' || array_to_string(job_listings.benefits, ', ') end,
			case when job_listings.is_authorized_to_work_in_us_required = false then '' else ' | Authorized to work in US required' end,
		 	
			case when job_listings.daily_work_hour_from = null then '' else ' | Daily work from: ' || job_listings.daily_work_hour_from || 'h' end,
			case when job_listings.daily_work_hour_to = null then '' else ' | Daily work to: ' || job_listings.daily_work_hour_to || 'h' end,
			case when (job_listings.total_daily_work_hours IS NULL OR array_length(job_listings.total_daily_work_hours, 1) is null) then '' else ' | Total work hour in day: ' || array_to_string(job_listings.total_daily_work_hours, 'hrs or ') end,
			case when (job_listings.work_shifts IS NULL OR array_length(job_listings.work_shifts, 1) = 0) then '' else ' | Work shifts: ' || array_to_string(job_listings.work_shifts, ', ') end,
			case when job_listings.total_weekly_work_day = 0 then '' else ' | Work ' || job_listings.total_weekly_work_day || ' days per week' end,
			case when (job_listings.weekly_work_days IS NULL OR array_length(job_listings.weekly_work_days, 1) = 0) then '' else ' | Work on ' || (select convert_date_of_week(job_listings.weekly_work_days)) end
        ), ' | ', E' | ')) as description_vector
        FROM job_listings
        JOIN job_positions ON job_listings.position_id = job_positions.id
        JOIN users ON job_listings.user_id = users.id
        JOIN business_places as user_business_places ON users.business_place_id = user_business_places.id
        LEFT JOIN LATERAL (
             SELECT jsonb_agg(jsonb_build_object('name', js.name,'id', js.id, 'type', js.type )) as job_skills
                        FROM job_listing_skills  jls
                        JOIN job_skills js ON js.id = jls.job_skill_id
                        WHERE jls.job_listing_id = job_listings.id
        ) job_listing_skills ON true
        WHERE ((job_listings.updated_at > :sql_last_value AND job_listings.updated_at < CURRENT_TIMESTAMP) OR (user_business_places.updated_at > :sql_last_value AND user_business_places.updated_at < CURRENT_TIMESTAMP))
        ORDER BY job_listings.updated_at ASC
        "
    }
}
filter{
    rest{
        request => {
            url => "https://api.openai.com/v1/embeddings"
            method => "post"
            headers => {
                "Content-Type" => "application/json"
                "Authorization" => "Bearer ${OPENAI_API_KEY}"
            }
            
            body => {
                "input" => "%{description_vector}" 
                "model" => "text-embedding-3-small"
                "encoding_format" => "float"
            }
        }
        target => "openai_response"  
    }
    mutate{
        copy => {"id" => "[@metadata][_id]"}
        add_field => { 
            "vector_listing_embedding" => "%{[openai_response][data][0][embedding]}"
        }
        remove_field => ["@version", "openai_response"]
    }
    mutate {
        gsub => [ "vector_listing_embedding", "[\[\]]", "" ]
        split => { "vector_listing_embedding" => "," }
    }
    mutate {
        convert => {
            "vector_listing_embedding" => "float"
        }
    }
}
output{

    elasticsearch{
        hosts => "elasticsearch:9200"
        user => "logstash_internal"
        password => "${LOGSTASH_INTERNAL_PASSWORD}"
        index => "circle-job-listings"
        document_id => "%{[@metadata][_id]}"
        pipeline => "circle-job-listings"
    }
}