input{
    jdbc{
        jdbc_connection_string => "jdbc:postgresql://${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_DATABASE}"
        jdbc_user => "${DATABASE_USER}"
        jdbc_password => "${DATABASE_PASSWORD}"
        jdbc_driver_class => "org.postgresql.Driver"
        jdbc_driver_library => "/usr/share/logstash/logstash-core/lib/jars/postgresql-42.7.3.jar"
        jdbc_paging_enabled => true
        jdbc_page_size => 500
        use_column_value => true
        tracking_column => "updated_at"
        tracking_column_type => "timestamp"
        clean_run => true
        schedule => "*/10 * * * * *"
        statement => "      
        SELECT
    jp.*,
    (to_jsonb(u))::text AS user,
    COALESCE(jpp.preferred_positions, '[]'::jsonb)::text AS preferred_positions,
    COALESCE(jrr.referrals, '[]'::jsonb)::text AS referrals,
    COALESCE(je.experiences, '[]'::jsonb)::text AS experiences,
    COALESCE(jps.js, '[]'::jsonb)::text AS job_skills,
    (
        SELECT 
            CONCAT(
                'Name: ' || u.name,
                ' | Username: ' || u.username,
                COALESCE(' | Roles: ' || ARRAY_TO_STRING(ARRAY_REMOVE(ARRAY_AGG(DISTINCT jp2.name), NULL), ', '), ''),
                COALESCE(' | Skills: ' || ARRAY_TO_STRING(ARRAY_REMOVE(ARRAY_AGG(DISTINCT js.name), NULL), ', '), ''),
                COALESCE(' | Languages: ' || ARRAY_TO_STRING(ARRAY_REMOVE(ARRAY_AGG(DISTINCT l.name || ' (' || jpl.level || ')'), NULL), ', '), ''),
                COALESCE(' | Work Experience: ' || ARRAY_TO_STRING(ARRAY_REMOVE(ARRAY_AGG(DISTINCT
                    jp3.name || ' for ' ||
                    COALESCE(
                        CASE WHEN je2.end_time IS NULL THEN
                            ROUND(CAST(DATE_PART('day', CURRENT_DATE - je2.start_time) / 365.25 AS NUMERIC), 1)
                        ELSE
                            ROUND(CAST(DATE_PART('day', je2.end_time - je2.start_time) / 365.25 AS NUMERIC), 1)
                        END::text, ''
                    ) || ' years'
                ), NULL), ', '), ''),
                ' | Location: ' || jp.lng || ', ' || jp.lat,
                ' | Status: ' || jp.status,
                CASE WHEN jp.is_open_to_work THEN ' | Open to work' ELSE '' END,
                CASE WHEN jp.is_open_to_work_any_time THEN ' | Open to work at any time' ELSE '' END,
                COALESCE(' | Work Schedules: ' || (
                    SELECT format_work_schedule(
                        jsonb_agg(jsonb_build_object(
                            'startTime', ws.start_time,
                            'endTime', ws.end_time,
                            'dayOfWeek', ws.day_of_week,
                            'startDate', ws.start_date
                        ))
                    )
                    FROM work_schedules ws
                    WHERE ws.job_profile_id = jp.id
                ), ''),
                COALESCE(' | Radius: ' || jp.distance_radius_in_miles || ' miles', ''),
                COALESCE(' | Industry Experience: ' || jp.experience_years_in_industry || ' years', ''),
                COALESCE(' | Neighborhood: ' || jp.neighborhood_name, ''),
                COALESCE(' | Address: ' || jp.address, ''),
                COALESCE(' | State: ' || jp.state, ''),
                COALESCE(' | County: ' || jp.county, ''),
                COALESCE(' | Country: ' || jp.country, ''),
                COALESCE(' | Locality: ' || jp.locality, ''),
                COALESCE(' | Sub Locality: ' || jp.sub_locality, ''),
				case when jp.is_authorized_to_work_in_us = false then '' else ' | Authorized to work in US' end,
				case when (jp.education_description is null OR jp.education_description = '') then '' else ' | Education: ' || jp.education_description end,
				case when (jp.bio is null OR jp.bio = '') then '' else ' | Bio: ' || jp.bio end
            )
        FROM job_preferred_positions jpp2
        LEFT JOIN job_positions jp2 ON jp2.id = jpp2.job_position_id
        LEFT JOIN job_profile_skills jps ON jps.job_profile_id = jp.id
        LEFT JOIN job_skills js ON js.id = jps.job_skill_id
        LEFT JOIN job_experiences je2 ON je2.job_profile_id = jp.id
        LEFT JOIN job_positions jp3 ON jp3.id = je2.job_position_id
        LEFT JOIN job_profile_languages jpl ON jpl.job_profile_id = jp.id
        LEFT JOIN languages l ON l.id = jpl.language_id
        WHERE jpp2.job_profile_id = jp.id
    ) AS description_vector
FROM job_profiles jp

LEFT JOIN LATERAL (
	SELECT jsonb_agg(jsonb_build_object('name', js.name,'id', js.id, 'type', js.type )) as js
			     FROM job_profile_skills jps
			     JOIN job_skills js ON js.id = jps.job_skill_id
			     WHERE jps.job_profile_id = jp.id
) jps ON true

JOIN users u ON u.id = jp.user_id
LEFT JOIN LATERAL (
    SELECT 
        jsonb_agg(
            to_jsonb(jpp) ||

	jsonb_build_object('translations', (SELECT jsonb_agg(jsonb_build_object('name', jpt.name,'include_position_names', jpt.include_position_names))
    FROM job_position_translations jpt
                    WHERE jpt.job_position_id = jpp.job_position_id))
	||
            jsonb_build_object(
                'job_position',
                (
                    SELECT to_jsonb(jp2)
                    FROM job_positions jp2
                    WHERE jp2.id = jpp.job_position_id
                )
            )
        ) AS preferred_positions
    FROM job_preferred_positions jpp
    WHERE jpp.job_profile_id = jp.id
) jpp ON true
LEFT JOIN LATERAL (
    SELECT jsonb_agg(to_jsonb(jrr)) AS referrals
    FROM job_referral_requests jrr
    WHERE status = 'APPROVED' AND jrr.job_profile_id = jp.id
) jrr ON true
LEFT JOIN LATERAL (
    SELECT 
        jsonb_agg(
            to_jsonb(je) ||
            jsonb_build_object(
                'company',
                (
                    SELECT to_jsonb(jec)
                    FROM job_experience_companies jec
                    WHERE jec.id = je.job_experience_company_id
                )
            ) ||
            jsonb_build_object(
                'position',
                (
                    SELECT to_jsonb(jp3)
                    FROM job_positions jp3
                    WHERE jp3.id = je.job_position_id
                )
            )
        ) AS experiences
    FROM job_experiences je
    WHERE je.job_profile_id = jp.id
) je ON true
WHERE jp.updated_at > :sql_last_value AND jp.updated_at < CURRENT_TIMESTAMP
and jp.id in ('3ee1da2e-6a27-4dd4-91a7-ba130ed8f768',  '87b83172-251e-4935-8c43-5c372e4ead42')
ORDER BY jp.updated_at ASC
        "
    }
}
filter{
    rest{
        request => {
            url => "https://api.openai.com/v1/embeddings"
            method => "post"
            headers => {
                "Content-Type" => "application/json"
                "Authorization" => "Bearer ${OPENAI_API_KEY}"
            }
            
            body => {
                "input" => "%{description_vector}" 
                "model" => "text-embedding-3-small"
                "encoding_format" => "float"
            }
        }
        target => "openai_response"  
    }
    mutate{
        copy => {"id" => "[@metadata][_id]"}
        add_field => { 
            "vector_profile_embedding" => "%{[openai_response][data][0][embedding]}"
        }
        remove_field => ["@version", "openai_response"]
    }
    mutate {
        gsub => [ "vector_profile_embedding", "[\[\]]", "" ]
        split => { "vector_profile_embedding" => "," }
    }
    mutate {
        convert => {
            "vector_profile_embedding" => "float"
        }
    }
}
output{
    elasticsearch{
        hosts => "elasticsearch:9200"
        user => "logstash_internal"
        password => "${LOGSTASH_INTERNAL_PASSWORD}"
        index => "circle-job-profiles"
        document_id => "%{[@metadata][_id]}"
        pipeline => "circle-job-profiles"
    }
}